AWSTemplateFormatVersion: '2010-09-09'
Description:
  A stack for deploying containerized sorry-cypress applications in AWS Fargate.
  An open-source, on-premise, self-hosted alternative to Cypress dashboard.
  Read more at https://github.com/agoldis/sorry-cypress

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    -
      Label:
        default: "Network Configuration"
      Parameters:
        - VPC
        - PrivateSubnets
        - LoadBalancerSubnets
        - LoadBalancerScheme
    -
      Label:
        default: "Security Configuration"
      Parameters:
        - AccessCIDR
        - AllowedCIDRRanges
        - ACMCertificateArn
        - S3ObjectACL
    -
      Label:
        default: "ECS Task Configuration"
      Parameters:
        - TaskCpu
        - TaskMemory
        - DirectorPort
        - SorryCypressVersion
        - DockerUsername
        - DockerPassword
    -
      Label:
        default: "Screenshots Storage Configuration"
      Parameters:
        - S3LifecycleExpirationDays
    -
      Label:
        default: "Database Configuration"
      Parameters:
        - DBType
        - DBInstanceClass
        - DBPassword
    -
      Label:
        default: "Scheduled Scaling Configuration"
      Parameters:
        - MinCapacityOff
        - MinCapacityOn
        - MaxCapacityOff
        - MaxCapacityOn
        - ScaleUpHour
        - ScaleDownHour

    ParameterLabels:
      VPC:
        default: "VPC Id"
      LoadBalancerSubnets:
        default: "Load Balancer Subnets"
      PrivateSubnets:
        default: "Private Subnets"
      AccessCIDR:
        default: "Front End Access CIDR"
      AllowedCIDRRanges:
        default: "Allowed CIDR Ranges"
      S3LifecycleExpirationDays:
        default: "Screenshots Expiration"
      TaskCpu:
        default: "ECS Task CPU"
      TaskMemory:
        default: "ECS Task Memory"
      DirectorPort:
        default: "sorry-cypress Director Port"
      MinCapacityOff:
        default: "Off Hours Minimum Capacity"
      MinCapacityOn:
        default: "On Hours Minimum Capacity"
      MaxCapacityOff:
        default: "Off Hours Maximum Capacity"
      MaxCapacityOn:
        default: "On Hours Maximum Capacity"
      ScaleUpHour:
        default: "Hour to Scale Up (EST, 24-hour format)"
      ScaleDownHour:
        default: "Hour to Scale Down (EST, 24-hour format)"
      DBType:
        default: Database Type
      DBInstanceClass:
        default: Database Instance Class
      DBPassword:
        default: Database Password
      DockerUsername:
        default: Docker Credential Username
      DockerPassword:
        default: Docker Credential Password
      ACMCertificateArn:
        default: "ACM Certificate ARN"
      S3ObjectACL:
        default: "ACL for Uploaded Objects in S3"

Parameters:

  TaskCpu:
    Type: Number
    Default: 1024
    Description: How much CPU to give the task. 1024 is 1 CPU

  TaskMemory:
    Type: Number
    Default: 2048
    Description: How much memory in megabytes to give the task

  DirectorPort:
    Type: Number
    Default: 8080
    Description: What port number to use for accessing director service

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC in which to deploy sorry-cypress.

  LoadBalancerSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: |
      Subnets in which to deploy to deploy the Load Balancer. Public or private based on the selected Load Balancer scheme.

  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnets in which to deploy.

  AccessCIDR:
    Type: String
    Default: 10.0.0.0/8
    Description: |
      CIDR range that is allowed to access the sorry-cypress app frontend. Enter a single CIDR range here. You can add more
      to the security group that is attached to the load balancer by hand later.

  AllowedCIDRRanges:
    Type: String
    Description: |
      The ranges you enter will be allowed to download from the S3 bucket via Bucket Policy. Depending on how you will be
      accessing sorry-cypress (internally or over the Internet) these values will depend on your environment. In most cases,
      this will be the same as AccessCIDR. Use a comma-separated list. Ex: 1.1.1.1/32,2.2.2.2/32

  S3LifecycleExpirationDays:
    Type: Number
    Default: 7
    Description: The number of days after which to expire objects in the screenshots storage S3 bucket

  DBType:
    Type: String
    Description: |
      Type of database for the sorry-cypress service.
      'local' will run a mongoDB container within the service.
      'remote' will create a DocumentDB instance.
    Default: 'remote'
    AllowedValues:
      - 'local'
      - 'remote'

  DBInstanceClass:
    Type: String
    Description: Class for the DB instance, if using a remote database
    AllowedValues:
      - db.t3.medium
      - db.r5.large
      - db.r5.xlarge
    Default: db.t3.medium

  DBPassword:
    Type: String
    Description: Database password, if using a remote database
    NoEcho: True

  MinCapacityOn:
    Type: Number
    Description: Minimum sorry-cypress task capacity during ON hours
    Default: 1
    MinValue: 1

  MaxCapacityOn:
    Type: Number
    Description: Maximum sorry-cypress task capacity during ON hours
    Default: 2
    MinValue: 1

  MinCapacityOff:
    Type: Number
    Description: Minimum sorry-cypress task capacity during OFF hours
    Default: 0

  MaxCapacityOff:
    Type: Number
    Description: Maximum sorry-cypress task capacity during OFF hours
    Default: 0

  ScaleUpHour:
    Type: String
    Description: The hour in EST (24-hour format) at which to scale up the sorry-cypress service tasks each day
    Default: 5
    MinLength: 1
    MaxLength: 2

  ScaleDownHour:
    Type: String
    Description: The hour in EST (24-hour format) at which to scale down the sorry-cypress service tasks each day
    Default: 23
    MinLength: 1
    MaxLength: 2

  SorryCypressVersion:
    Type: String
    Description: Version (tag) of the sorry-cypress images to use
    Default: latest
    MinLength: 1

  DockerUsername:
    Type: String
    Description: Username for authentication with Docker registry

  DockerPassword:
    Type: String
    Description: Password for authentication with Docker registry
    NoEcho: True

  ACMCertificateArn:
    Type: String
    Description: ARN of the ACM certificate for the Load Balancer

  S3ObjectACL:
    Type: String
    Description: |
      ACL to apply to uploaded objects in S3 (videos and screenshots). This value
      will be set in the pre-signed URL that sorry-cypress generates when a job is about
      to upload something to the S3 bucket
    AllowedValues:
      - public-read
      - bucket-owner-full-control
      - private
    Default: "public-read"

  LoadBalancerScheme:
    Type: String
    Description: Scheme for the load balancer
    AllowedValues: ["internal", "internet-facing"]
    Default: "internal"

Conditions:

  UseRemoteDB: !Equals
    - !Ref DBType
    - 'remote'

  UseLocalDB: !Equals
    - !Ref DBType
    - 'local'

  UseDockerCredential: !And
    - !Not
      - !Equals
        - !Ref DockerUsername
        - ''
    - !Not
      - !Equals
        - !Ref DockerPassword
        - ''

Resources:

  #------------------------------------------------------------#
  #
  # Load Balancer and Supporting Resources
  #
  #------------------------------------------------------------#

  # A security group for the containers we will run in Fargate.
  # Two rules, allowing network traffic from the load
  # balancer and from other members of the security group.
  #
  # Remove any of the following ingress rules that are not needed.
  # If you want to make direct requests to a container using its
  # public IP address you'll need to add a security group rule
  # to allow traffic from all IP addresses.
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupName: !Sub ${AWS::StackName}-fargate-sg
      GroupDescription: Access to the Fargate containers
      Tags:
        - Key: Name
          Value: sorry-cypress-fargate-container-sg

  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupName: !Sub '${AWS::StackName}-load-balancer-sg'
      GroupDescription: Access to the load balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AccessCIDR
          Description: Allow port 80 UI traffic
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref AccessCIDR
          Description: Allow port 8080 API traffic
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref AccessCIDR
          Description: Allow port 443 UI traffic
      Tags:
        - Key: Name
          Value: sorry-cypress-user-lb-sg

  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the ALB
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'LoadBalancerSG'

  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'FargateContainerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref 'AWS::StackName'
      Scheme: !Ref LoadBalancerScheme
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets: !Ref LoadBalancerSubnets
      SecurityGroups: [!Ref 'LoadBalancerSG']

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroupDashboard'
          Type: 'forward'
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: 80
      Protocol: HTTP

  LoadBalancerListenerHttps:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroupDashboard'
          Type: 'forward'
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref ACMCertificateArn

  LoadBalancerListenerDirector:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroupDirector'
          Type: 'forward'
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: !Ref 'DirectorPort'
      Protocol: HTTP

  ### Routing load balancer to services
  # Director
  TargetGroupDirector:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Port: 1234
      Matcher:
        HttpCode: 302
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'

  # API
  TargetGroupAPI:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Port: 4000
      Matcher:
        HttpCode: 400
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'

  # Dashboard
  TargetGroupDashboard:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'

  LoadBalancerRuleAPI:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroupAPI'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values:
            - /api
      ListenerArn: !Ref 'LoadBalancerListener'
      Priority: 2

  #------------------------------------------------------------#
  #
  # Conditional - Remote DB Resources
  #
  #------------------------------------------------------------#

  DBCluster:
    Type: AWS::DocDB::DBCluster
    Condition: UseRemoteDB
    Properties:
      BackupRetentionPeriod: 1
      DBSubnetGroupName: !Ref DBSubnetGroup
      DeletionProtection: False
      EngineVersion: 4.0.0
      MasterUsername: sorrycypress
      MasterUserPassword: !Ref DBPassword
      DBClusterParameterGroupName: !Ref DBParameterGroup
      Port: 27017
      StorageEncrypted: True
      KmsKeyId: !Ref KMSKey
      VpcSecurityGroupIds:
        - !Ref FargateContainerSecurityGroup

  DBSubnetGroup:
    Type: AWS::DocDB::DBSubnetGroup
    Condition: UseRemoteDB
    Properties:
      DBSubnetGroupName: !Sub "${AWS::StackName}-subnetgroup"
      DBSubnetGroupDescription: "Subnet group for sorry-cypress DB"
      SubnetIds: !Ref PrivateSubnets

  DBParameterGroup:
    Type: AWS::DocDB::DBClusterParameterGroup
    Condition: UseRemoteDB
    Properties:
      Description: DocumentDB parameter group for sorry-cypress
      Family: "docdb4.0"
      Parameters:
        audit_logs: disabled
        change_stream_log_retention_duration: 10800
        profiler: disabled
        profiler_sampling_rate: 1.0
        profiler_threshold_ms: 100
        tls: disabled
        ttl_monitor: enabled

  DBInstance:
    Type: AWS::DocDB::DBInstance
    Condition: UseRemoteDB
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: !Ref DBInstanceClass

  #------------------------------------------------------------#
  #
  # IAM Resources
  #
  #------------------------------------------------------------#

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub ecs.${AWS::URLSuffix}
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Rules which allow ECS to attach network interfaces to instances
                  # on your behalf in order for awsvpc networking mode to work right
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:CreateNetworkInterfacePermission'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DeleteNetworkInterfacePermission'
                  - 'ec2:Describe*'
                  - 'ec2:DetachNetworkInterface'

                  # Rules which allow ECS to update load balancers on your behalf
                  # with the information about how to send traffic to your containers
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                Resource: '*'

  # This is a role that's used by container payload
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub ecs-tasks.${AWS::URLSuffix}
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-s3-write
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow ECS task to upload new objects
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                Resource:
                  - !Sub ${S3Bucket.Arn}/*
        - PolicyName: KmsKeyPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'kms:*'
                Resource: !Sub '${KMSKey.Arn}'

  # This is a role which is used by the ECS agent
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub ecs-tasks.${AWS::URLSuffix}
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: KmsKeyPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'kms:*'
                Resource: !Sub '${KMSKey.Arn}'

  #------------------------------------------------------------#
  #
  # Storage Resources
  #
  #------------------------------------------------------------#

  # Screenshots bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      # Settings to allow public access with a bucket policy that restricts by IP
      # Taken from:
      # https://docs.sorry-cypress.dev/configuration/troubleshooting#can-i-use-a-private-aws-s3-bucket-with-sorry-cypress
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: false
        BlockPublicAcls: false
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: ContentExpiration
            Status: 'Enabled'
            ExpirationInDays: !Ref S3LifecycleExpirationDays
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - 'POST'
              - 'GET'
              - 'PUT'
              - 'HEAD'
            AllowedOrigins:
              - '*'

  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowRestrictedPublicIps
            Effect: Allow
            Principal: "*"
            Action: 's3:GetObject'
            Resource: !Sub "${S3Bucket.Arn}/*"
            Condition:
              IpAddress:
                aws:SourceIp: !Split
                  - ","
                  - !Ref AllowedCIDRRanges

  CloudWatchGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${AWS::StackName}/logs'
      RetentionInDays: 7

  #------------------------------------------------------------#
  #
  # ECS Resources
  #
  #------------------------------------------------------------#

  ECSCluster:
    Type: AWS::ECS::Cluster

  EcsTaskDefinitionRemoteDB:
    Type: AWS::ECS::TaskDefinition
    Condition: UseRemoteDB
    Properties:
      Family: 'sorry-cypress-bundle-cf'
      NetworkMode: awsvpc
      Memory: !Ref 'TaskMemory'
      Cpu: !Ref 'TaskCpu'
      TaskRoleArn: !GetAtt 'TaskRole.Arn'
      ExecutionRoleArn: !GetAtt 'ECSTaskExecutionRole.Arn'
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Image: !Sub ehoglid/sorry-cypress-director:${SorryCypressVersion}
          Essential: true
          PortMappings:
            - ContainerPort: 1234
          RepositoryCredentials: !If
            - UseDockerCredential
            - CredentialsParameter: !Ref DockerCredentialsSecret
            - !Ref AWS::NoValue
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
          Environment:
            - Name: DASHBOARD_URL
              Value: !Sub 'http://${LoadBalancer.DNSName}'
            - Name: EXECUTION_DRIVER
              Value: ../execution/mongo/driver
            - Name: SCREENSHOTS_DRIVER
              Value: ../screenshots/s3.driver
            - Name: MONGODB_DATABASE
              Value: sorry-cypress
            - Name: MONGODB_URI
              Value: !Sub mongodb://sorrycypress:${DBPassword}@${DBCluster.Endpoint}:27017
            - Name: S3_BUCKET
              Value: !Ref S3Bucket
            - Name: S3_REGION
              Value: !Ref 'AWS::Region'
            - Name: S3_ACL
              Value: !Ref S3ObjectACL
          Name: director
        - Image: !Sub ehoglid/sorry-cypress-api:${SorryCypressVersion}
          PortMappings:
            - ContainerPort: 4000
          RepositoryCredentials: !If
            - UseDockerCredential
            - CredentialsParameter: !Ref DockerCredentialsSecret
            - !Ref AWS::NoValue
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
          Environment:
            - Name: MONGODB_DATABASE
              Value: sorry-cypress
            - Name: MONGODB_URI
              Value: !Sub mongodb://sorrycypress:${DBPassword}@${DBCluster.Endpoint}:27017
          DependsOn:
            - ContainerName: director
              Condition: START
          Name: api
        - Image: !Sub ehoglid/sorry-cypress-dashboard:${SorryCypressVersion}
          PortMappings:
            - ContainerPort: 8080
          RepositoryCredentials: !If
            - UseDockerCredential
            - CredentialsParameter: !Ref DockerCredentialsSecret
            - !Ref AWS::NoValue
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
          Environment:
            - Name: GRAPHQL_SCHEMA_URL
              Value: /api
            - Name: PORT
              Value: 8080
            - Name: CI_URL
              Value: ''
          DependsOn:
            - ContainerName: api
              Condition: START
          Name: dashboard

  EcsTaskDefinitionLocalDB:
    Type: AWS::ECS::TaskDefinition
    Condition: UseLocalDB
    Properties:
      Family: 'sorry-cypress-bundle-cf'
      NetworkMode: awsvpc
      Memory: !Ref 'TaskMemory'
      Cpu: !Ref 'TaskCpu'
      TaskRoleArn: !GetAtt 'TaskRole.Arn'
      ExecutionRoleArn: !GetAtt 'ECSTaskExecutionRole.Arn'
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Image: mongo:4
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
          Environment:
            - Name: MONGO_INITDB_ROOT_PASSWORD
              Value: sorry-cypress
            - Name: MONGO_INITDB_ROOT_USERNAME
              Value: sorry-cypress
          Name: mongo
        - Image: !Sub ehoglid/sorry-cypress-director:${SorryCypressVersion}
          Essential: true
          PortMappings:
            - ContainerPort: 1234
          RepositoryCredentials: !If
            - UseDockerCredential
            - CredentialsParameter: !Ref DockerCredentialsSecret
            - !Ref AWS::NoValue
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
          Environment:
            - Name: DASHBOARD_URL
              Value: !Sub 'http://${LoadBalancer.DNSName}'
            - Name: EXECUTION_DRIVER
              Value: ../execution/mongo/driver
            - Name: SCREENSHOTS_DRIVER
              Value: ../screenshots/s3.driver
            - Name: MONGODB_DATABASE
              Value: sorry-cypress
            - Name: MONGODB_URI
              Value: mongodb://sorry-cypress:sorry-cypress@127.0.0.1:27017
            - Name: S3_BUCKET
              Value: !Ref S3Bucket
            - Name: S3_REGION
              Value: !Ref 'AWS::Region'
            - Name: S3_ACL
              Value: !Ref S3ObjectACL
          DependsOn:
            - ContainerName: mongo
              Condition: START
          Name: director
        - Image: !Sub ehoglid/sorry-cypress-api:${SorryCypressVersion}
          PortMappings:
            - ContainerPort: 4000
          RepositoryCredentials: !If
            - UseDockerCredential
            - CredentialsParameter: !Ref DockerCredentialsSecret
            - !Ref AWS::NoValue
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
          Environment:
            - Name: MONGODB_DATABASE
              Value: sorry-cypress
            - Name: MONGODB_URI
              Value: mongodb://sorry-cypress:sorry-cypress@127.0.0.1:27017
          DependsOn:
            - ContainerName: director
              Condition: START
          Name: api
        - Image: !Sub ehoglid/sorry-cypress-dashboard:${SorryCypressVersion}
          PortMappings:
            - ContainerPort: 8080
          RepositoryCredentials: !If
            - UseDockerCredential
            - CredentialsParameter: !Ref DockerCredentialsSecret
            - !Ref AWS::NoValue
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
          Environment:
            - Name: GRAPHQL_SCHEMA_URL
              Value: /api
            - Name: PORT
              Value: 8080
            - Name: CI_URL
              Value: ''
          DependsOn:
            - ContainerName: api
              Condition: START
          Name: dashboard

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  EcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancerRuleAPI
      - EcsTaskDefinitionWaitCondition
      - DBWaitCondition
    Properties:
      ServiceName: !Sub ${AWS::StackName}-ecs-service
      Cluster: !Ref 'ECSCluster'
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref 'FargateContainerSecurityGroup'
          Subnets: !Ref PrivateSubnets
      TaskDefinition: !If
        - UseRemoteDB
        - !Ref 'EcsTaskDefinitionRemoteDB'
        - !Ref 'EcsTaskDefinitionLocalDB'
      LoadBalancers:
        - ContainerName: director
          ContainerPort: 1234
          TargetGroupArn: !Ref 'TargetGroupDirector'
        - ContainerName: api
          ContainerPort: 4000
          TargetGroupArn: !Ref 'TargetGroupAPI'
        - ContainerName: dashboard
          ContainerPort: 8080
          TargetGroupArn: !Ref 'TargetGroupDashboard'

  #------------------------------------------------------------#
  #
  # Condition-based Wait Handles
  #
  #------------------------------------------------------------#

  RemoteDBWaitHandle:
    Condition: UseRemoteDB
    Type: "AWS::CloudFormation::WaitConditionHandle"

  LocalDBWaitHandle:
    Condition: UseLocalDB
    Type: "AWS::CloudFormation::WaitConditionHandle"

  DBWaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    Properties:
      Handle: !If [UseRemoteDB, !Ref RemoteDBWaitHandle, !Ref LocalDBWaitHandle]
      Timeout: "1"
      Count: 0

  EcsTaskDefinitionWaitCondition:
    Type: "AWS::CloudFormation::WaitCondition"
    Properties:
      Handle: !If [UseRemoteDB, !Ref RemoteDBWaitHandle, !Ref LocalDBWaitHandle]
      Timeout: "1"
      Count: 0

  #------------------------------------------------------------#
  #
  # Scheduled Scaling Resources
  #
  #------------------------------------------------------------#

  ScheduledScalingLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: EcsService
    Properties:
      Description: |
        Creates AWS Auto Scaling Scheduled Scaling Actions to scale the
        sorry-cypress tasks up and down
      Handler: index.lambda_handler
      Role: !GetAtt ScheduledScalingLambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 30
      Code:
        ZipFile: !Sub |
          import json
          import time
          import boto3
          import cfnresponse
          from botocore.exceptions import ClientError
          from botocore.config import Config

          boto3_config = Config(region_name = '${AWS::Region}')
          client = boto3.client('application-autoscaling', config=boto3_config)
          service_id = 'service/${ECSCluster}/${EcsService.Name}'
          dimension = 'ecs:service:DesiredCount'
          on_action_name = 'sorry-cypress-scale-up'
          off_action_name = 'sorry-cypress-scale-down'

          def lambda_handler(event, context):
            r = event['RequestType']
            print("CF sent %s." % r)

            if r == "Create":
              if register_target():
                print("Registered target")
                if set_schedule():
                  print("Success")
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                else:
                  print("Failed setting schedule")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})
              else:
                  print("Failed registering target")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})
            elif r == "Update":
              physical_resource_id = event['PhysicalResourceId']
              print("physical_resource_id: %s" % physical_resource_id)
              if register_target():
                print("Registered target")
                if set_schedule():
                  print("Success")
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physical_resource_id)
                else:
                  print("Failed setting schedule")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})
              else:
                  print("Failed registering target")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})
            elif r == "Delete":
              if delete():
                time.sleep(10)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              else:
                cfnresponse.send(event, context, cfnresponse.FAILED, {"Message": "Delete failed. See CW logs."})
            else:
              msg = "Unhandled event from CF - " + r + ". Fail."
              print(msg)
              cfnresponse.send(event, context, cfnresponse.FAILED, {"Message": msg})

          def describe_target():
            try:
              r = client.describe_scalable_targets(
                ServiceNamespace='ecs',
                ResourceIds=[service_id],
                ScalableDimension=dimension
              )
              if len(r['ScalableTargets']):
                return True
              else:
                return False
            except ClientError as e:
              print(e)
              return False

          def register_target():
            if not describe_target():
              try:
                r = client.register_scalable_target(
                  ServiceNamespace='ecs',
                  ResourceId=service_id,
                  ScalableDimension=dimension,
                  MinCapacity=${MinCapacityOn},
                  MaxCapacity=${MaxCapacityOn}
                )
              except ClientError as e:
                print(e)
                return False

              if 'ResponseMetadata' in r:
                return True
              else:
                return False
            else:
              return True

          def set_schedule():
            try:
              r = client.put_scheduled_action(
                ServiceNamespace='ecs',
                Schedule='cron(0 ${ScaleUpHour} * * ? *)',
                Timezone='America/New_York',
                ScheduledActionName=on_action_name,
                ResourceId=service_id,
                ScalableDimension=dimension,
                ScalableTargetAction={
                  'MinCapacity': ${MinCapacityOn},
                  'MaxCapacity': ${MaxCapacityOn}
                }
              )
              r = client.put_scheduled_action(
                ServiceNamespace='ecs',
                Schedule='cron(0 ${ScaleDownHour} * * ? *)',
                Timezone='America/New_York',
                ScheduledActionName=off_action_name,
                ResourceId=service_id,
                ScalableDimension=dimension,
                ScalableTargetAction={
                  'MinCapacity': ${MinCapacityOff},
                  'MaxCapacity': ${MaxCapacityOff}
                }
              )
            except ClientError as e:
              print(e)
              return False
            else:
              return True

          def delete():
            try:
              r = client.delete_scheduled_action(
                ServiceNamespace='ecs',
                ScheduledActionName=on_action_name,
                ResourceId=service_id,
                ScalableDimension=dimension
              )
              r = client.delete_scheduled_action(
                ServiceNamespace='ecs',
                ScheduledActionName=off_action_name,
                ResourceId=service_id,
                ScalableDimension=dimension
              )
              if describe_target():
                r = client.deregister_scalable_target(
                  ServiceNamespace='ecs',
                  ResourceId=service_id,
                  ScalableDimension=dimension
                )
            except ClientError as e:
              print(e)
            return True

  ScheduledScalingLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub lambda.${AWS::URLSuffix}
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: GrantAutoScalingPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:DescribeScalableTargets
                  - application-autoscaling:RegisterScalableTarget
                  - application-autoscaling:DeleteScheduledAction
                  - application-autoscaling:PutScheduledAction
                  - application-autoscaling:DeregisterScalableTarget
                Resource: '*'
        - PolicyName: GrantIAMAssumeRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                Resource: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.${AWS::URLSuffix}/AWSServiceRoleForApplicationAutoScaling_ECSService

  SetAutoScalingSchedule:
    Type: Custom::SetAutoScalingSchedule
    Properties:
      ServiceToken: !GetAtt ScheduledScalingLambdaFunction.Arn
      MinCapacityOn: !Ref MinCapacityOn
      MaxCapacityOn: !Ref MaxCapacityOn
      MinCapacityOff: !Ref MinCapacityOff
      MaxCapacityOff: !Ref MaxCapacityOff
      ScaleDownHour: !Ref ScaleDownHour
      ScaleUpHour: !Ref ScaleUpHour

  #------------------------------------------------------------#
  #
  # Conditional - Docker Credential Secret and Policy
  #
  #------------------------------------------------------------#

  DockerCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Condition: UseDockerCredential
    Properties:
      Name: !Sub '${AWS::StackName}/docker-credentials'
      SecretString: !Sub '{"username":"${DockerUsername}","password":"${DockerPassword}"}'

  GrantSecretsManagerPermissionsPolicy:
    Condition: UseDockerCredential
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: GrantSecretsManagerPermissions
      Roles:
        - !Ref ECSTaskExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'secretsmanager:DescribeSecret'
              - 'secretsmanager:GetSecretValue'
            Resource: !Ref DockerCredentialsSecret

  #------------------------------------------------------------#
  #
  # Encryption Resources
  #
  #------------------------------------------------------------#

  KMSKey:
    Type: 'AWS::KMS::Key'
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      Description: KMS key used for sorry-cypress
      Enabled: true
      EnableKeyRotation: true
      KeyUsage: ENCRYPT_DECRYPT
      KeyPolicy:
        Version: 2012-10-17
        Id: sorry-cypress-kms-key
        Statement:
          - Sid: AllowRoot
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: KMSPermissions
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:CreateGrant'
              - 'kms:ListGrants'
              - 'kms:DescribeKey'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:CallerAccount': !Ref 'AWS::AccountId'

  #------------------------------------------------------------#
  #
  # Outputs
  #
  #------------------------------------------------------------#

Outputs:
  DirectorURL:
    Description: DirectorURL
    Value: !Sub 'http://${LoadBalancer.DNSName}:${DirectorPort}'
    Export:
      Name: !Sub '${AWS::StackName}:DirectorURL'
  DashboardURL:
    Description: DashboardURL
    Value: !Sub 'http://${LoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}:DashboardURL'
  ApiURL:
    Description: ApiURL
    Value: !Sub 'http://${LoadBalancer.DNSName}/api'
    Export:
      Name: !Sub '${AWS::StackName}:ApiURL'
